// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/city-mobil/gobuns/health (interfaces: Checkable)

// Package mock_health is a generated GoMock package.
package mock_health

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckable is a mock of Checkable interface.
type MockCheckable struct {
	ctrl     *gomock.Controller
	recorder *MockCheckableMockRecorder
}

// MockCheckableMockRecorder is the mock recorder for MockCheckable.
type MockCheckableMockRecorder struct {
	mock *MockCheckable
}

// NewMockCheckable creates a new mock instance.
func NewMockCheckable(ctrl *gomock.Controller) *MockCheckable {
	mock := &MockCheckable{ctrl: ctrl}
	mock.recorder = &MockCheckableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckable) EXPECT() *MockCheckableMockRecorder {
	return m.recorder
}

// ComponentID mocks base method.
func (m *MockCheckable) ComponentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ComponentID indicates an expected call of ComponentID.
func (mr *MockCheckableMockRecorder) ComponentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentID", reflect.TypeOf((*MockCheckable)(nil).ComponentID))
}

// ComponentType mocks base method.
func (m *MockCheckable) ComponentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ComponentType indicates an expected call of ComponentType.
func (mr *MockCheckableMockRecorder) ComponentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentType", reflect.TypeOf((*MockCheckable)(nil).ComponentType))
}

// Name mocks base method.
func (m *MockCheckable) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCheckableMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCheckable)(nil).Name))
}

// Ping mocks base method.
func (m *MockCheckable) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCheckableMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCheckable)(nil).Ping), arg0)
}
