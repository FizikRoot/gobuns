// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/city-mobil/gobuns/registry (interfaces: Client)

// Package mock_registry is a generated GoMock package.
package mock_registry

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ComponentID mocks base method.
func (m *MockClient) ComponentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ComponentID indicates an expected call of ComponentID.
func (mr *MockClientMockRecorder) ComponentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentID", reflect.TypeOf((*MockClient)(nil).ComponentID))
}

// ComponentType mocks base method.
func (m *MockClient) ComponentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ComponentType indicates an expected call of ComponentType.
func (mr *MockClientMockRecorder) ComponentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentType", reflect.TypeOf((*MockClient)(nil).ComponentType))
}

// GetBool mocks base method.
func (m *MockClient) GetBool(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBool indicates an expected call of GetBool.
func (mr *MockClientMockRecorder) GetBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockClient)(nil).GetBool), arg0, arg1)
}

// GetInt mocks base method.
func (m *MockClient) GetInt(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt indicates an expected call of GetInt.
func (mr *MockClientMockRecorder) GetInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockClient)(nil).GetInt), arg0, arg1)
}

// GetString mocks base method.
func (m *MockClient) GetString(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockClientMockRecorder) GetString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockClient)(nil).GetString), arg0, arg1)
}

// Name mocks base method.
func (m *MockClient) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockClientMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockClient)(nil).Name))
}

// Ping mocks base method.
func (m *MockClient) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), arg0)
}

// SetComponentID mocks base method.
func (m *MockClient) SetComponentID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComponentID", arg0)
}

// SetComponentID indicates an expected call of SetComponentID.
func (mr *MockClientMockRecorder) SetComponentID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComponentID", reflect.TypeOf((*MockClient)(nil).SetComponentID), arg0)
}

// SetComponentType mocks base method.
func (m *MockClient) SetComponentType(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComponentType", arg0)
}

// SetComponentType indicates an expected call of SetComponentType.
func (mr *MockClientMockRecorder) SetComponentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComponentType", reflect.TypeOf((*MockClient)(nil).SetComponentType), arg0)
}

// SetName mocks base method.
func (m *MockClient) SetName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", arg0)
}

// SetName indicates an expected call of SetName.
func (mr *MockClientMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockClient)(nil).SetName), arg0)
}
