// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/city-mobil/gobuns/tntcluster/pool (interfaces: ConnectorPool)

// Package mock_pool is a generated GoMock package.
package mock_pool

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tarantool "github.com/viciious/go-tarantool"
)

// MockConnectorPool is a mock of ConnectorPool interface.
type MockConnectorPool struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorPoolMockRecorder
}

// MockConnectorPoolMockRecorder is the mock recorder for MockConnectorPool.
type MockConnectorPoolMockRecorder struct {
	mock *MockConnectorPool
}

// NewMockConnectorPool creates a new mock instance.
func NewMockConnectorPool(ctrl *gomock.Controller) *MockConnectorPool {
	mock := &MockConnectorPool{ctrl: ctrl}
	mock.recorder = &MockConnectorPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorPool) EXPECT() *MockConnectorPoolMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnectorPool) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnectorPoolMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnectorPool)(nil).Close))
}

// ComponentID mocks base method.
func (m *MockConnectorPool) ComponentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ComponentID indicates an expected call of ComponentID.
func (mr *MockConnectorPoolMockRecorder) ComponentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentID", reflect.TypeOf((*MockConnectorPool)(nil).ComponentID))
}

// ComponentType mocks base method.
func (m *MockConnectorPool) ComponentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ComponentType indicates an expected call of ComponentType.
func (mr *MockConnectorPoolMockRecorder) ComponentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentType", reflect.TypeOf((*MockConnectorPool)(nil).ComponentType))
}

// Connect mocks base method.
func (m *MockConnectorPool) Connect() (*tarantool.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*tarantool.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectorPoolMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnectorPool)(nil).Connect))
}

// Name mocks base method.
func (m *MockConnectorPool) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockConnectorPoolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConnectorPool)(nil).Name))
}

// Ping mocks base method.
func (m *MockConnectorPool) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockConnectorPoolMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockConnectorPool)(nil).Ping))
}

// RemoteAddr mocks base method.
func (m *MockConnectorPool) RemoteAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnectorPoolMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConnectorPool)(nil).RemoteAddr))
}
